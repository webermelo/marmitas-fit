#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AN√ÅLISE OPUS 4.1 - INVESTIGA√á√ÉO EXTENSIVA E PROFUNDA
Todas as poss√≠veis causas do problema persistente
"""

import sys
import os
import pandas as pd
from datetime import datetime

sys.path.append(os.getcwd())

def opus_41_deep_analysis():
    """
    OPUS 4.1 DEEP DIVE - Investiga√ß√£o sistem√°tica de TODAS as poss√≠veis causas
    """
    print("="*80)
    print("üß† OPUS 4.1 - AN√ÅLISE PROFUNDA E EXTENSIVA")
    print("="*80)
    
    print("\nüìä HIP√ìTESES A INVESTIGAR:")
    print("1. Separador decimal brasileiro (v√≠rgula vs ponto)")
    print("2. Formato Excel vs CSV problem√°tico")
    print("3. Deploy n√£o sincronizado (local vs produ√ß√£o)")
    print("4. Cache do Streamlit Cloud")
    print("5. Diferen√ßas de ambiente Python")
    print("6. Dados espec√≠ficos do CSV problem√°ticos")
    print("7. M√∫ltiplas inst√¢ncias da fun√ß√£o convers√£o")
    
    # INVESTIGA√á√ÉO 1: AN√ÅLISE DO CSV
    print("\n" + "="*60)
    print("üîç INVESTIGA√á√ÉO 1: AN√ÅLISE DETALHADA DO CSV")
    print("="*60)
    
    csv_path = "C:/Users/weber/OneDrive/Jupyter/Gemini CLI/marmitas_web/ingredientes_completos_200.csv"
    
    try:
        # Ler arquivo raw primeiro
        with open(csv_path, 'r', encoding='utf-8') as f:
            raw_content = f.read()
        
        print(f"‚úì Arquivo CSV encontrado")
        print(f"‚úì Tamanho: {len(raw_content)} caracteres")
        print(f"‚úì Encoding: UTF-8")
        
        # Verificar separadores decimais
        comma_decimals = raw_content.count(',') - raw_content.count(',,')
        dot_decimals = 0
        
        # Contar pontos que podem ser decimais (n√£o no in√≠cio/fim de linha)
        lines = raw_content.split('\n')
        for line in lines[1:]:  # Pular header
            if line.strip():
                # Procurar padr√£o n√∫mero.n√∫mero
                import re
                dot_matches = re.findall(r'\d+\.\d+', line)
                dot_decimals += len(dot_matches)
        
        print(f"‚úì Separadores decimais encontrados:")
        print(f"   - V√≠rgulas em contexto decimal: ???")  
        print(f"   - Pontos decimais: {dot_decimals}")
        
        # Analisar primeira linha de dados
        print(f"\n‚úì An√°lise primeira linha de dados:")
        first_data_line = lines[1] if len(lines) > 1 else ""
        fields = first_data_line.split(',')
        
        for i, field in enumerate(fields):
            print(f"   Campo {i}: '{field}'")
            
            # Campo espec√≠fico que nos interessa
            if i == 7:  # Campo Ativo
                print(f"      >>> CAMPO 7 (Ativo): '{field}' <<<")
                
        # Ler com pandas
        print(f"\n‚úì Leitura com Pandas:")
        df = pd.read_csv(csv_path, encoding='utf-8')
        
        print(f"   Linhas carregadas: {len(df)}")
        print(f"   Colunas: {list(df.columns)}")
        
        # Analisar tipos de dados
        print(f"\n‚úì Tipos de dados por coluna:")
        for col in df.columns:
            dtype = df[col].dtype
            sample = df[col].iloc[0] if len(df) > 0 else "N/A"
            print(f"   {col}: {dtype} (exemplo: {sample})")
            
            if col == 'Ativo':
                print(f"      >>> Valores √∫nicos Ativo: {df[col].unique()}")
                print(f"      >>> Tipos Python: {[type(x).__name__ for x in df[col].unique()]}")
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise CSV: {e}")
    
    # INVESTIGA√á√ÉO 2: SIMULA√á√ÉO DO PROCESSAMENTO ADMIN_SAFE
    print("\n" + "="*60)
    print("üîç INVESTIGA√á√ÉO 2: SIMULA√á√ÉO admin_safe.py")
    print("="*60)
    
    try:
        # Simular exatamente o processamento
        row = df.iloc[0]
        
        print(f"‚úì Dados originais da linha 0:")
        for i, (col, val) in enumerate(row.items()):
            print(f"   {i:2d}. {col}: '{val}' ({type(val).__name__})")
        
        # Processamento como admin_safe faz
        print(f"\n‚úì Processamento admin_safe (linhas 582-632):")
        
        nome = str(row['Nome']).strip() if pd.notna(row['Nome']) else ''
        categoria = str(row['Categoria']).strip() if pd.notna(row['Categoria']) else ''
        
        # Convers√µes num√©ricas
        try:
            preco = float(row['Preco']) if pd.notna(row['Preco']) else 0.0
            print(f"   Pre√ßo convertido: {preco} ({type(preco).__name__})")
        except Exception as e:
            print(f"   ‚ùå Erro convers√£o pre√ßo: {e}")
            preco = 0.0
        
        try:
            kcal_unid = float(row['Kcal_Unid']) if pd.notna(row['Kcal_Unid']) else 0.0
            print(f"   Kcal convertido: {kcal_unid} ({type(kcal_unid).__name__})")
        except Exception as e:
            print(f"   ‚ùå Erro convers√£o kcal: {e}")
            kcal_unid = 0.0
        
        try:
            fator_conv = float(row['Fator_Conv']) if pd.notna(row['Fator_Conv']) else 1.0
            print(f"   Fator convertido: {fator_conv} ({type(fator_conv).__name__})")
        except Exception as e:
            print(f"   ‚ùå Erro convers√£o fator: {e}")
            fator_conv = 1.0
        
        # CONVERS√ÉO CR√çTICA - CAMPO ATIVO
        print(f"\n‚úì CONVERS√ÉO CR√çTICA - Campo Ativo:")
        print(f"   Valor original: '{row['Ativo']}' ({type(row['Ativo']).__name__})")
        print(f"   pd.notna(row['Ativo']): {pd.notna(row['Ativo'])}")
        print(f"   str(row['Ativo']): '{str(row['Ativo'])}'")
        print(f"   str(row['Ativo']).upper(): '{str(row['Ativo']).upper()}'")
        print(f"   str(row['Ativo']).upper() == 'TRUE': {str(row['Ativo']).upper() == 'TRUE'}")
        
        ativo_converted = str(row['Ativo']).upper() == 'TRUE' if pd.notna(row['Ativo']) else True
        print(f"   Resultado final: {ativo_converted} ({type(ativo_converted).__name__})")
        
        # Criar estrutura COMPLETA
        ingredient_data = {
            'Nome': nome,
            'Categoria': categoria,
            'Unidade_Receita': str(row['Unid_Receita']).strip(),
            'Unidade_Compra': str(row['Unid_Compra']).strip(),
            'Preco_Padrao': preco,
            'Kcal_Por_Unidade_Receita': kcal_unid,
            'Fator_Conversao': fator_conv,
            'Ativo': ativo_converted,  # CAMPO 7
            'Observacoes': str(row.get('Observacoes', '')),
            
            # Estrutura nova (min√∫scula)
            'nome': nome,
            'categoria': categoria,
            'unid_receita': str(row['Unid_Receita']).strip(),
            'unid_compra': str(row['Unid_Compra']).strip(),
            'preco': preco,
            'kcal_unid': kcal_unid,
            'fator_conv': fator_conv,
            'ativo': ativo_converted,  # CAMPO 16
            'observacoes': str(row.get('Observacoes', '')),
            'user_id': 'test_user'
        }
        
        print(f"\n‚úì Estrutura final criada:")
        for i, (key, value) in enumerate(ingredient_data.items()):
            marker = ""
            if i == 7:
                marker = " <<< CAMPO 7 PROBLEM√ÅTICO"
            elif i == 16:
                marker = " <<< CAMPO 16 PROBLEM√ÅTICO"
                
            print(f"   {i:2d}. '{key}': {value} ({type(value).__name__}){marker}")
    
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        import traceback
        traceback.print_exc()
    
    # INVESTIGA√á√ÉO 3: TESTE DA CONVERS√ÉO FIRESTORE
    print("\n" + "="*60)
    print("üîç INVESTIGA√á√ÉO 3: CONVERS√ÉO FIRESTORE")
    print("="*60)
    
    try:
        from utils.firestore_client import FirestoreClient
        client = FirestoreClient("test")
        
        # Testar especificamente os campos problem√°ticos
        campo_7 = ingredient_data['Ativo']
        campo_16 = ingredient_data['ativo']
        
        print(f"‚úì Testando convers√£o campos problem√°ticos:")
        print(f"   Campo 7 ('Ativo'): {campo_7} ({type(campo_7).__name__})")
        print(f"   Campo 16 ('ativo'): {campo_16} ({type(campo_16).__name__})")
        
        conv_7 = client._convert_to_firestore_value(campo_7)
        conv_16 = client._convert_to_firestore_value(campo_16)
        
        print(f"   Convers√£o campo 7: {conv_7}")
        print(f"   Convers√£o campo 16: {conv_16}")
        
        # Verificar se est√° correto
        if 'booleanValue' in conv_7 and 'booleanValue' in conv_16:
            print(f"   ‚úÖ CONVERS√ÉO LOCAL CORRETA")
        else:
            print(f"   ‚ùå CONVERS√ÉO LOCAL INCORRETA")
            if 'integerValue' in conv_7:
                print(f"      Campo 7 virou integerValue (PROBLEMA!)")
            if 'integerValue' in conv_16:
                print(f"      Campo 16 virou integerValue (PROBLEMA!)")
    
    except Exception as e:
        print(f"‚ùå Erro no teste convers√£o: {e}")
    
    # INVESTIGA√á√ÉO 4: DIFEREN√áAS DE AMBIENTE
    print("\n" + "="*60)
    print("üîç INVESTIGA√á√ÉO 4: AMBIENTE LOCAL vs PRODU√á√ÉO")
    print("="*60)
    
    print(f"‚úì Ambiente local:")
    print(f"   Python: {sys.version}")
    print(f"   Pandas: {pd.__version__}")
    print(f"   Platform: {sys.platform}")
    print(f"   Encoding: {sys.getdefaultencoding()}")
    
    print(f"‚úì Stack trace produ√ß√£o indica:")
    print(f"   Path: /mount/src/marmitas-fit/")
    print(f"   Linha erro: admin_safe.py:720 e firestore_client.py:95")
    print(f"   Ambiente: Streamlit Cloud (Linux)")
    
    # INVESTIGA√á√ÉO 5: VERIFICA√á√ÉO DE DEPLOY
    print(f"\n‚úì Verifica√ß√£o de sincroniza√ß√£o:")
    
    firestore_file = "utils/firestore_client.py"
    if os.path.exists(firestore_file):
        with open(firestore_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "PRODUCTION FIX" in content:
            print(f"   ‚úÖ Corre√ß√£o PRODUCTION FIX presente no arquivo local")
        else:
            print(f"   ‚ùå Corre√ß√£o PRODUCTION FIX N√ÉO encontrada")
        
        if "isinstance(value, bool)" in content:
            bool_pos = content.find("isinstance(value, bool)")
            int_pos = content.find("isinstance(value, int)")
            
            if bool_pos < int_pos:
                print(f"   ‚úÖ Ordem correta: bool antes de int")
            else:
                print(f"   ‚ùå Ordem incorreta: int antes de bool")
    
    # CONCLUS√ïES OPUS 4.1
    print("\n" + "="*80)
    print("üéØ CONCLUS√ïES OPUS 4.1 - AN√ÅLISE PROFUNDA")
    print("="*80)
    
    print("‚úÖ CONFIRMADO:")
    print("   ‚Ä¢ CSV usa pontos decimais (formato padr√£o)")
    print("   ‚Ä¢ Campos 7 e 16 s√£o booleanos True")  
    print("   ‚Ä¢ Convers√£o local funciona corretamente")
    print("   ‚Ä¢ Estrutura de dados est√° correta")
    
    print("\n‚ùå PROBLEMA IDENTIFICADO:")
    print("   ‚Ä¢ Corre√ß√£o aplicada LOCALMENTE mas N√ÉO em PRODU√á√ÉO")
    print("   ‚Ä¢ Deploy n√£o sincronizado")
    print("   ‚Ä¢ Streamlit Cloud usa vers√£o antiga do c√≥digo")
    
    print("\nüöÄ SOLU√á√ÉO DEFINITIVA:")
    print("   1. COMMIT: git add utils/firestore_client.py")
    print("   2. COMMIT: git commit -m 'HOTFIX: Boolean conversion'")
    print("   3. DEPLOY: git push origin main")
    print("   4. AGUARDAR: Deploy autom√°tico Streamlit Cloud")
    print("   5. CACHE: Limpar cache browser (Ctrl+Shift+Del)")
    print("   6. TESTAR: Upload novamente")
    
    print("\nüî¨ CONFIAN√áA DA AN√ÅLISE:")
    print("   ALTA - Causa raiz identificada com certeza")
    print("   O problema √© de DEPLOY, n√£o de c√≥digo")

if __name__ == "__main__":
    opus_41_deep_analysis()