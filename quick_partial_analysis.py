#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AN√ÅLISE R√ÅPIDA - Upload Parcial
Diagn√≥stico r√°pido do problema de upload parcial
"""

import streamlit as st
import pandas as pd
from datetime import datetime

def main():
    st.set_page_config(
        page_title="An√°lise R√°pida - Upload Parcial",
        page_icon="‚ö°",
        layout="wide"
    )
    
    st.title("‚ö° AN√ÅLISE R√ÅPIDA - UPLOAD PARCIAL")
    st.markdown("---")
    
    if 'user' not in st.session_state:
        st.error("‚ùå Fa√ßa login primeiro em app.py")
        return
    
    user_id = st.session_state.user['uid']
    st.success(f"‚úÖ Usu√°rio: {user_id}")
    
    # An√°lise r√°pida - bot√£o √∫nico
    if st.button("üîç EXECUTAR AN√ÅLISE R√ÅPIDA", type="primary"):
        
        st.header("üìä 1. CONTAGEM ATUAL DE INGREDIENTES")
        
        try:
            from utils.database import get_database_manager
            
            db_manager = get_database_manager()
            current_df = db_manager.get_user_ingredients(user_id)
            
            if current_df.empty:
                st.error("‚ùå NENHUM ingrediente encontrado no Firebase")
                st.error("üö® FALHA TOTAL DO UPLOAD")
            else:
                count = len(current_df)
                st.success(f"‚úÖ {count} ingredientes encontrados no Firebase")
                
                if count < 198:
                    missing = 198 - count
                    st.warning(f"‚ö†Ô∏è UPLOAD PARCIAL: {missing} ingredientes ausentes")
                    
                    # Calcular percentual
                    percentage = (count / 198) * 100
                    st.metric("Taxa de Sucesso", f"{percentage:.1f}%")
                    
                    if count > 0:
                        st.info("‚úÖ PROGRESSO: Erro boolean foi corrigido (alguns salvos)")
                        st.warning("‚ùå PROBLEMA ATUAL: Upload incompleto")
                    
                elif count == 198:
                    st.success("üéâ TODOS OS 198 INGREDIENTES PRESENTES!")
                    st.balloons()
                else:
                    st.info(f"‚ÑπÔ∏è {count} ingredientes (mais que o esperado)")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao verificar Firebase: {e}")
        
        st.header("üîç 2. POSS√çVEIS CAUSAS DO UPLOAD PARCIAL")
        
        causes = [
            {
                "causa": "Rate Limiting Firebase",
                "probabilidade": "ALTA",
                "descricao": "Firebase limitou opera√ß√µes por excesso de requests simult√¢neos",
                "solucao": "Upload em lotes menores com delays"
            },
            {
                "causa": "Timeout da Aplica√ß√£o",
                "probabilidade": "ALTA", 
                "descricao": "Streamlit ou browser interrompeu por tempo limite",
                "solucao": "Upload em chunks com progress feedback"
            },
            {
                "causa": "Falhas Silenciosas",
                "probabilidade": "M√âDIA",
                "descricao": "Alguns registros falharam sem gerar erro vis√≠vel",
                "solucao": "Valida√ß√£o individual de cada item"
            },
            {
                "causa": "Limite de Mem√≥ria",
                "probabilidade": "BAIXA",
                "descricao": "Falta de mem√≥ria durante processamento de 198 items",
                "solucao": "Processamento em lotes menores"
            },
            {
                "causa": "Dados Inv√°lidos",
                "probabilidade": "M√âDIA",
                "descricao": "Alguns ingredientes t√™m dados que causam falha",
                "solucao": "Valida√ß√£o pr√©via dos dados do CSV"
            }
        ]
        
        for i, cause in enumerate(causes):
            with st.expander(f"{i+1}. {cause['causa']} ({cause['probabilidade']} probabilidade)"):
                st.write(f"**Descri√ß√£o**: {cause['descricao']}")
                st.write(f"**Solu√ß√£o**: {cause['solucao']}")
        
        st.header("üöÄ 3. PR√ìXIMAS A√á√ïES RECOMENDADAS")
        
        actions = [
            "üî¨ **Executar debug_partial_upload.py** para an√°lise detalhada",
            "üìä **Usar batch_upload_optimizer.py** para reprocessar com otimiza√ß√µes",
            "üß™ **Testar upload de 10-20 ingredientes** primeiro para validar",
            "üìã **Comparar arquivo CSV** com o que est√° no Firebase",
            "üîÑ **Fazer upload incremental** dos ingredientes faltantes"
        ]
        
        for action in actions:
            st.markdown(action)
        
        # Sugest√£o de arquivo de teste
        st.header("üß™ 4. TESTE IMEDIATO SUGERIDO")
        
        test_ingredients = [
            {"Nome": "Teste Frango", "Categoria": "Proteina", "Preco": 25.90, "Ativo": True},
            {"Nome": "Teste Arroz", "Categoria": "Carboidrato", "Preco": 8.50, "Ativo": True},
            {"Nome": "Teste Brocolis", "Categoria": "Vegetal", "Preco": 12.30, "Ativo": False}
        ]
        
        st.info("üí° **Sugest√£o**: Teste primeiro com estes 3 ingredientes:")
        st.json(test_ingredients)
        
        if st.button("üß™ TESTAR 3 INGREDIENTES AGORA"):
            try:
                from utils.firestore_client import get_firestore_client
                
                client = get_firestore_client()
                if not client:
                    st.error("‚ùå Erro Firebase client")
                    return
                
                collection_path = f"users/{user_id}/ingredients"
                
                success_count = 0
                for ingredient in test_ingredients:
                    try:
                        ingredient_data = {
                            "nome": ingredient["Nome"],
                            "categoria": ingredient["Categoria"], 
                            "preco": ingredient["Preco"],
                            "ativo": ingredient["Ativo"],
                            "unid_receita": "g",
                            "unid_compra": "kg",
                            "kcal_unid": 1.0,
                            "fator_conv": 1000.0,
                            "observacoes": f"Teste r√°pido {datetime.now().isoformat()}",
                            "user_id": user_id,
                            "created_at": datetime.now().isoformat()
                        }
                        
                        result = client.collection(collection_path).add(ingredient_data)
                        
                        if result:
                            success_count += 1
                            st.success(f"‚úÖ {ingredient['Nome']} salvo com sucesso")
                        else:
                            st.error(f"‚ùå Falha ao salvar {ingredient['Nome']}")
                    
                    except Exception as item_error:
                        st.error(f"üö® Erro em {ingredient['Nome']}: {item_error}")
                
                if success_count == 3:
                    st.success("üéâ TESTE PASSOU! Sistema funcionando - problema √© com volume")
                    st.info("üëâ **Pr√≥ximo passo**: Usar batch_upload_optimizer.py")
                elif success_count > 0:
                    st.warning(f"‚ö†Ô∏è Parcial: {success_count}/3 funcionaram")
                else:
                    st.error("‚ùå TESTE FALHOU: Problema sist√™mico")
            
            except Exception as e:
                st.error(f"üö® Erro no teste: {e}")

if __name__ == "__main__":
    main()