# -*- coding: utf-8 -*-
"""
P√°gina de Administra√ß√£o - Marmitas Fit
Painel para gerenciar ingredientes, embalagens e usu√°rios
"""

import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime

# Lista de administradores autorizados
ADMINS = [
    "weber.melo@gmail.com",    # Super Admin Principal
    "weber@marmitasfit.com",   # Backup
    "admin@marmitasfit.com",   # Admin secund√°rio
    "demo@marmitasfit.com"     # Para testes
]

def is_admin(user_email):
    """Verifica se o usu√°rio √© administrador"""
    return user_email.lower() in [admin.lower() for admin in ADMINS]

# Fun√ß√µes para gerar templates Excel diretamente
def generate_ingredientes_template():
    """Gera template de ingredientes"""
    data = [
        {
            'Nome': 'Frango (peito)',
            'Categoria': 'Prote√≠na Animal',
            'Pre√ßo (R$)': 18.90,
            'Unid.Receita': 'g',
            'Unid.Compra': 'kg',
            'Kcal/Unid': 1.65,
            'Fator Conv.': 1000,
            'Ativo': True,
            'Observa√ß√µes': 'Sem pele, congelado'
        },
        {
            'Nome': 'Arroz integral',
            'Categoria': 'Carboidrato',
            'Pre√ßo (R$)': 8.90,
            'Unid.Receita': 'g',
            'Unid.Compra': 'kg',
            'Kcal/Unid': 1.11,
            'Fator Conv.': 1000,
            'Ativo': True,
            'Observa√ß√µes': 'Gr√£o longo, tipo 1'
        },
        {
            'Nome': 'Br√≥colis',
            'Categoria': 'Vegetal',
            'Pre√ßo (R$)': 6.50,
            'Unid.Receita': 'g',
            'Unid.Compra': 'kg',
            'Kcal/Unid': 0.34,
            'Fator Conv.': 1000,
            'Ativo': True,
            'Observa√ß√µes': 'Fresco, pre√ßo m√©dio'
        },
        {
            'Nome': 'Azeite extra virgem',
            'Categoria': 'Gordura',
            'Pre√ßo (R$)': 12.00,
            'Unid.Receita': 'ml',
            'Unid.Compra': 'L',
            'Kcal/Unid': 8.84,
            'Fator Conv.': 1000,
            'Ativo': True,
            'Observa√ß√µes': 'Primeira prensagem'
        },
        {
            'Nome': 'Sal refinado',
            'Categoria': 'Tempero',
            'Pre√ßo (R$)': 1.20,
            'Unid.Receita': 'g',
            'Unid.Compra': 'kg',
            'Kcal/Unid': 0.00,
            'Fator Conv.': 1000,
            'Ativo': True,
            'Observa√ß√µes': 'Iodado'
        }
    ]
    
    df = pd.DataFrame(data)
    buffer = BytesIO()
    df.to_excel(buffer, sheet_name='Ingredientes', index=False)
    buffer.seek(0)
    return buffer.getvalue()

def generate_embalagens_template():
    """Gera template de embalagens"""
    data = [
        {
            'Nome': 'Marmita 500ml',
            'Tipo': 'descartavel',
            'Pre√ßo (R$)': 0.50,
            'Capacidade (ml)': 500,
            'Categoria': 'principal',
            'Ativo': True,
            'Descri√ß√£o': 'PP transparente com tampa'
        },
        {
            'Nome': 'Marmita 750ml',
            'Tipo': 'descartavel',
            'Pre√ßo (R$)': 0.65,
            'Capacidade (ml)': 750,
            'Categoria': 'principal',
            'Ativo': True,
            'Descri√ß√£o': 'PP transparente com tampa'
        },
        {
            'Nome': 'Marmita 1000ml',
            'Tipo': 'descartavel',
            'Pre√ßo (R$)': 0.80,
            'Capacidade (ml)': 1000,
            'Categoria': 'principal',
            'Ativo': True,
            'Descri√ß√£o': 'PP transparente com tampa'
        },
        {
            'Nome': 'Pote sobremesa 150ml',
            'Tipo': 'descartavel',
            'Pre√ßo (R$)': 0.25,
            'Capacidade (ml)': 150,
            'Categoria': 'complemento',
            'Ativo': True,
            'Descri√ß√£o': 'Para doces e frutas'
        },
        {
            'Nome': 'Talher pl√°stico',
            'Tipo': 'utensilio',
            'Pre√ßo (R$)': 0.08,
            'Capacidade (ml)': 0,
            'Categoria': 'utensilio',
            'Ativo': True,
            'Descri√ß√£o': 'Garfo + faca + colher'
        },
        {
            'Nome': 'Guardanapo',
            'Tipo': 'higiene',
            'Pre√ßo (R$)': 0.05,
            'Capacidade (ml)': 0,
            'Categoria': 'higiene',
            'Ativo': True,
            'Descri√ß√£o': 'Papel 20x20cm'
        },
        {
            'Nome': 'Sacola pl√°stica',
            'Tipo': 'transporte',
            'Pre√ßo (R$)': 0.12,
            'Capacidade (ml)': 0,
            'Categoria': 'transporte',
            'Ativo': True,
            'Descri√ß√£o': '30x40cm al√ßa camiseta'
        }
    ]
    
    df = pd.DataFrame(data)
    buffer = BytesIO()
    df.to_excel(buffer, sheet_name='Embalagens', index=False)
    buffer.seek(0)
    return buffer.getvalue()

def generate_custos_fixos_template():
    """Gera template de custos fixos"""
    data = [
        {
            'Categoria': 'Energia',
            'Item': 'Conta de luz',
            'Custo Mensal (R$)': 150.00,
            'Rateio por Marmita': 0.30,
            'Descri√ß√£o': 'Fog√£o, geladeira, freezer'
        },
        {
            'Categoria': 'G√°s',
            'Item': 'Botij√£o 13kg',
            'Custo Mensal (R$)': 80.00,
            'Rateio por Marmita': 0.16,
            'Descri√ß√£o': 'Consumo m√©dio mensal'
        },
        {
            'Categoria': '√Ågua',
            'Item': 'Conta de √°gua',
            'Custo Mensal (R$)': 60.00,
            'Rateio por Marmita': 0.12,
            'Descri√ß√£o': 'Limpeza e preparo'
        },
        {
            'Categoria': 'Aluguel',
            'Item': 'Espa√ßo cozinha',
            'Custo Mensal (R$)': 800.00,
            'Rateio por Marmita': 1.60,
            'Descri√ß√£o': 'Proporcional ao uso'
        },
        {
            'Categoria': 'M√£o de obra',
            'Item': 'Sal√°rio pr√≥prio',
            'Custo Mensal (R$)': 2000.00,
            'Rateio por Marmita': 4.00,
            'Descri√ß√£o': 'Base: 500 marmitas/m√™s'
        },
        {
            'Categoria': 'TOTAL',
            'Item': '',
            'Custo Mensal (R$)': 3090.00,
            'Rateio por Marmita': 6.18,
            'Descri√ß√£o': 'Base: 500 marmitas/m√™s'
        }
    ]
    
    df = pd.DataFrame(data)
    buffer = BytesIO()
    df.to_excel(buffer, sheet_name='Custos_Fixos', index=False)
    buffer.seek(0)
    return buffer.getvalue()

def show_admin_page():
    """P√°gina principal de administra√ß√£o"""
    
    # Verificar autentica√ß√£o
    if 'user' not in st.session_state:
        st.error("üîê Acesso restrito. Fa√ßa login primeiro.")
        return
    
    user_email = st.session_state.user.get('email', '')
    
    # Verificar permiss√µes de admin
    if not is_admin(user_email):
        st.error("üö´ Acesso negado. Voc√™ n√£o tem permiss√µes de administrador.")
        st.info(f"üë§ Usu√°rio atual: {user_email}")
        return
    
    # Interface de administra√ß√£o
    st.title("üëë Painel de Administra√ß√£o")
    st.success(f"üîì Acesso autorizado: {user_email}")
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs([
        "üì• Templates", 
        "üì§ Upload Dados", 
        "üë• Usu√°rios", 
        "üìä Estat√≠sticas"
    ])
    
    with tab1:
        show_templates_section()
    
    with tab2:
        show_upload_section()
    
    with tab3:
        show_users_section()
    
    with tab4:
        show_stats_section()

def show_templates_section():
    """Se√ß√£o de download de templates"""
    
    st.header("üì• Templates Excel")
    st.info("üí° Baixe os templates para facilitar o upload de dados em lote")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("ü•ï Ingredientes")
        st.markdown("""
        **Template para:**
        - Nome e categoria
        - Pre√ßos atualizados
        - Informa√ß√µes nutricionais
        - Unidades de medida
        """)
        
        # Bot√£o de download
        ingredientes_data = generate_ingredientes_template()
        st.download_button(
            label="üì• Download Template Ingredientes",
            data=ingredientes_data,
            file_name=f"ingredientes_template_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    
    with col2:
        st.subheader("üì¶ Embalagens")
        st.markdown("""
        **Template para:**
        - Tipos de embalagens
        - Pre√ßos unit√°rios
        - Capacidades
        - Categorias
        """)
        
        # Bot√£o de download
        embalagens_data = generate_embalagens_template()
        st.download_button(
            label="üì• Download Template Embalagens",
            data=embalagens_data,
            file_name=f"embalagens_template_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    
    with col3:
        st.subheader("üè† Custos Fixos")
        st.markdown("""
        **Template para:**
        - Energia, g√°s, √°gua
        - Aluguel e m√£o de obra
        - Rateio por marmita
        - C√°lculo autom√°tico
        """)
        
        # Bot√£o de download
        custos_data = generate_custos_fixos_template()
        st.download_button(
            label="üì• Download Template Custos",
            data=custos_data,
            file_name=f"custos_fixos_template_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    
    # Instru√ß√µes de uso
    st.markdown("---")
    st.subheader("üìã Como usar os templates:")
    
    with st.expander("üìñ Instru√ß√µes detalhadas"):
        st.markdown("""
        ### üéØ Passo a passo:
        
        1. **üì• Baixe** o template desejado
        2. **‚úèÔ∏è Preencha** os dados no Excel
        3. **üíæ Salve** o arquivo
        4. **üì§ Upload** na aba "Upload Dados"
        5. **‚úÖ Confirme** a importa√ß√£o
        
        ### ‚ö†Ô∏è Regras importantes:
        
        - **N√£o altere** os nomes das colunas
        - **Mantenha** os tipos de dados (texto, n√∫mero, verdadeiro/falso)
        - **Use pontos** para decimais (ex: 18.90)
        - **Ative/Desative** com TRUE/FALSE
        - **Teste primeiro** com poucos registros
        
        ### üîÑ Frequ√™ncia de atualiza√ß√£o:
        
        - **Ingredientes:** Mensal (pre√ßos de mercado)
        - **Embalagens:** Trimestral (novos fornecedores)
        - **Custos Fixos:** Conforme necess√°rio
        """)

def show_upload_section():
    """Se√ß√£o de upload de dados"""
    
    st.header("üì§ Upload de Dados")
    st.warning("üöß Funcionalidade em desenvolvimento")
    
    # Placeholder para futura implementa√ß√£o
    st.info("""
    **Pr√≥ximas funcionalidades:**
    - Upload de planilhas Excel
    - Valida√ß√£o autom√°tica de dados
    - Preview antes da importa√ß√£o
    - Log de altera√ß√µes
    """)

def show_users_section():
    """Se√ß√£o de gerenciamento de usu√°rios"""
    
    st.header("üë• Gerenciamento de Usu√°rios")
    st.warning("üöß Funcionalidade em desenvolvimento")
    
    # Mock data para demonstra√ß√£o
    st.subheader("üìä Resumo de Usu√°rios")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üë• Total Usu√°rios", "1.247")
    
    with col2:
        st.metric("üíé Assinantes Ativos", "1.189", "12 novos")
    
    with col3:
        st.metric("üí∞ Receita Mensal", "R$ 2.958", "4.2%")
    
    with col4:
        st.metric("üìà Taxa Convers√£o", "95.3%", "2.1%")

def show_stats_section():
    """Se√ß√£o de estat√≠sticas do sistema"""
    
    st.header("üìä Estat√≠sticas do Sistema")
    st.warning("üöß Funcionalidade em desenvolvimento")
    
    # Mock data para demonstra√ß√£o
    st.subheader("üìà M√©tricas de Uso")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("üçΩÔ∏è Receitas Criadas", "15.632")
        st.metric("üè≠ Produ√ß√µes Planejadas", "8.947")
        st.metric("üõí Listas Geradas", "12.458")
    
    with col2:
        st.metric("üìÑ PDFs Baixados", "9.234")
        st.metric("üí° Sugest√µes de Pre√ßo", "24.789")
        st.metric("‚ö° Uptime Sistema", "99.7%")

# Fun√ß√£o para incluir no menu principal
def show_admin_menu_item():
    """Mostra item de menu admin se usu√°rio for administrador"""
    
    if 'user' in st.session_state:
        user_email = st.session_state.user.get('email', '')
        
        if is_admin(user_email):
            return True
    
    return False